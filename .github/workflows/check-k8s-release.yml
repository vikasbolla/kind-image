name: Check for new Kubernetes releases

on:
  schedule:
    - cron: '0 9 */3 * *'  # Every 3 days at 09:00 UTC
  workflow_dispatch:     # Allow manual runs

jobs:
  check-k8s:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch latest stable Kubernetes releases
        id: fetch
        run: |
          # Fetch the latest 10 Kubernetes release tags from GitHub
          # Extract only the tag names, exclude alpha/beta/rc versions, sort them
          curl -s "https://api.github.com/repos/kubernetes/kubernetes/releases?per_page=10" \
            | jq -r '.[].tag_name' \
            | grep -v -- '-alpha' | grep -v -- '-beta' | grep -v -- '-rc' \
            | sort -V > new_releases  # Sort them version-wise and save

          # Ensure the file with previously seen versions exists
          [ -f .last_k8s_versions ] || touch .last_k8s_versions

          # Sort the previously seen versions
          sort -V .last_k8s_versions > last_k8s_versions.sorted

          # Print out the current and previous release lists
          echo "new_releases:"
          cat new_releases
          echo "last_k8s_versions.sorted:"
          cat last_k8s_versions.sorted

          # Compare new vs previously seen versions
          # The command outputs only the versions that are new (in new_releases but not in your recorded old list).
          comm -23 new_releases last_k8s_versions.sorted > compared_versions

          # Output the new versions as a GitHub Action output
          echo "compared_versions<<EOF" >> $GITHUB_OUTPUT
          cat compared_versions >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if new versions exist
        id: has_new
        run: |
          if [[ -s compared_versions ]]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Trigger build for each new version
        if: steps.has_new.outputs.found == 'true'
        run: |
          while read -r version; do
            echo "Triggering build for $version"
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-publish.yml/dispatches \
              -d "{\"ref\":\"main\", \"inputs\": {\"k8s-version\": \"$version\"}}"
          done < compared_versions

      - name: Create or update pull request 
        if: steps.has_new.outputs.found == 'true'
        run: | 
            # Generate a timestamped branch name
            BRANCH="k8s-version-update-$(date +'%Y%m%d-%H%M%S')"

            # Configure Git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # Create and switch to the new branch
            git checkout -b "$BRANCH"

            # Copy new versions file
            cp new_releases .last_k8s_versions

            # Stage, commit, and push
            git add .last_k8s_versions
            git commit -m "Update latest available kubernetes version in last_k8s_version"
            git push origin "$BRANCH"

            # Create pull request using GitHub CLI
            gh pr create \
                --title "Update latest available verisons in last_k8s_version" \
                --body "Automated PR to update tracked Kubernetes versions." \
                --base main \
                --head "$BRANCH"
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

